from PIL import Image
import numpy as np

def generate_key(image_size):
    """Generate a random key for encryption."""
    np.random.seed(42)  # For reproducibility
    key = np.random.randint(0, 256, image_size, dtype=np.uint8)
    return key

def encrypt_image(image_path, key):
    """Encrypt the image using the provided key."""
    # Load the image
    image = Image.open(image_path)
    image_array = np.array(image)

    # Encrypt the image
    encrypted_array = (image_array + key) % 256

    # Convert the encrypted array back to an image
    encrypted_image = Image.fromarray(encrypted_array.astype('uint8'), image.mode)

    return encrypted_image

def decrypt_image(encrypted_image, key):
    """Decrypt the image using the provided key."""
    encrypted_array = np.array(encrypted_image)
    
    # Decrypt the image
    decrypted_array = (encrypted_array - key) % 256

    # Convert the decrypted array back to an image
    decrypted_image = Image.fromarray(decrypted_array.astype('uint8'), encrypted_image.mode)

    return decrypted_image

def main():
    # Path to the input image
    image_path = "input_image.png"

    # Load the image to get its size
    image = Image.open(image_path)
    image_size = np.array(image).shape

    # Generate a key for encryption
    key = generate_key(image_size)

    # Encrypt the image
    encrypted_image = encrypt_image(image_path, key)
    encrypted_image.save("encrypted_image.png")
    print("Encrypted image saved as encrypted_image.png")

    # Decrypt the image
    decrypted_image = decrypt_image(encrypted_image, key)
    decrypted_image.save("decrypted_image.png")
    print("Decrypted image saved as decrypted_image.png")

if __name__ == "__main__":
    main()
